// src/admin/Leagues/Tabs/LeagueMatchesTab.jsx
import React, { useEffect, useMemo, useRef, useState } from 'react';
import serverConfig from '../../../../../serverConfig';
import './LeagueMatchesTab.css';

const API_MATCHES = `${serverConfig}/matches`;
const API_LEAGUES = `${serverConfig}/leagues`;
const API_PLAYERS = `${serverConfig}/players`;
const API_EVENTS = `${serverConfig}/matchEvents`;
const API_REFS = `${serverConfig}/referees`;

/* ===================== –í—Å–ø–æ–º–æ–≥–∞–ª–∫–∏ ===================== */
function clamp(n, a, b) {
  return Math.max(a, Math.min(b, n));
}
const fmt2 = (n) => String(n).padStart(2, '0');
const dtLoc = (s) => {
  try {
    return new Date(s).toLocaleString();
  } catch {
    return String(s || '');
  }
};
const escapeHtml = (s) =>
  String(s || '')
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;');

/* ===================== –ú–æ–¥–∞–ª–∫–∞: –ü—Ä–æ–≤–µ—Å—Ç–∏ –º–∞—Ç—á ===================== */
function LiveMatchModal({ match, onClose, onScoreChanged }) {
  const [loading, setLoading] = useState(false);
  const [err, setErr] = useState('');

  // –ò–Ω—Ñ–æ –ª–∏–≥–∏ (–¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–∞–π–º–∞)
  const [halfMinutes, setHalfMinutes] = useState(45);
  const [halves, setHalves] = useState(2);

  // –ò–≥—Ä–æ–∫–∏ / —Å—É–¥—å–∏ / —Å–æ–±—ã—Ç–∏—è
  const [team1Players, setTeam1Players] = useState([]);
  const [team2Players, setTeam2Players] = useState([]);
  const [lineup1, setLineup1] = useState([]); // –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –º–∞—Ç—á (Player[])
  const [lineup2, setLineup2] = useState([]);
  const [lineupFallback, setLineupFallback] = useState(false);
  const [referees, setReferees] = useState([]);
  const [events, setEvents] = useState([]);

  // –õ–æ–∫–∞–ª—å–Ω—ã–π —Å—á—ë—Ç/—Å—Ç–∞—Ç—É—Å
  const [score1, setScore1] = useState(match.team1Score ?? 0);
  const [score2, setScore2] = useState(match.team2Score ?? 0);
  const [status, setStatus] = useState(match.status || 'SCHEDULED');

  // –¢–∞–π–º –∏ —Ç–∞–π–º–µ—Ä
  const [currentHalf, setCurrentHalf] = useState(1);
  const [running, setRunning] = useState(false);
  const [halfStartTS, setHalfStartTS] = useState(null); // ms
  const [elapsed, setElapsed] = useState(0); // sec
  const tickRef = useRef(null);

  // –§–æ—Ä–º—ã —Å–æ–±—ã—Ç–∏–π (—Å–æ–∑–¥–∞–Ω–∏–µ)
  const initialEvt = {
    type: '',
    playerId: '',
    assistPlayerId: '',
    refereeId: '',
    minute: '',
    description: '',
  };
  const [evt1, setEvt1] = useState({ ...initialEvt });
  const [evt2, setEvt2] = useState({ ...initialEvt });

  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
  const [editEventId, setEditEventId] = useState(null);
  const [editDraft, setEditDraft] = useState({
    type: '',
    half: 1,
    minute: '',
    playerId: '',
    assistPlayerId: '',
    refereeId: '',
    description: '',
  });

  const EVENT_TYPES = [
    { key: 'GOAL', label: '–ì–æ–ª', icon: '‚öΩ' },
    { key: 'PENALTY_SCORED', label: '–ì–æ–ª (–ø–µ–Ω–∞–ª—å—Ç–∏)', icon: 'ü•Ö' },
    { key: 'PENALTY_MISSED', label: '–ü–µ–Ω–∞–ª—å—Ç–∏ –º–∏–º–æ', icon: 'üö´' },
    { key: 'YELLOW_CARD', label: '–ñ—ë–ª—Ç–∞—è', icon: 'üü®' },
    { key: 'RED_CARD', label: '–ö—Ä–∞—Å–Ω–∞—è', icon: 'üü•' },
  ];
  const ALL_EVENT_TYPES = [
    'GOAL',
    'PENALTY_SCORED',
    'PENALTY_MISSED',
    'YELLOW_CARD',
    'RED_CARD',
    'SUBSTITUTION',
  ];
  const EVENT_TYPE_LABEL = {
    GOAL: '–ì–æ–ª (—Å –∏–≥—Ä—ã)',
    PENALTY_SCORED: '–ì–æ–ª (–ø–µ–Ω–∞–ª—å—Ç–∏)',
    PENALTY_MISSED: '–ü–µ–Ω–∞–ª—å—Ç–∏ –Ω–µ –∑–∞–±–∏—Ç',
    YELLOW_CARD: '–ñ—ë–ª—Ç–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞',
    RED_CARD: '–ö—Ä–∞—Å–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞',
    SUBSTITUTION: '–ó–∞–º–µ–Ω–∞',
  };

  const STATUS_RU = {
    SCHEDULED: '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω',
    LIVE: '–ò–¥—ë—Ç',
    FINISHED: '–ó–∞–≤–µ—Ä—à—ë–Ω',
    POSTPONED: '–ü–µ—Ä–µ–Ω–µ—Å—ë–Ω',
    CANCELED: '–û—Ç–º–µ–Ω—ë–Ω',
  };
  const statusRu = (s) => STATUS_RU[s] || s || '';

  // --- –∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤/–¥–∞–Ω–Ω—ã—Ö
  async function loadLeague() {
    const res = await fetch(`${API_LEAGUES}/${match.leagueId}`);
    const data = await res.json();
    if (!res.ok) throw new Error(data?.error || `HTTP ${res.status}`);
    setHalfMinutes(data?.halfMinutes ?? 45);
    setHalves(data?.halves ?? 2);
  }
  async function loadPlayers() {
    const qs1 = new URLSearchParams({
      range: JSON.stringify([0, 199]),
      sort: JSON.stringify(['name', 'ASC']),
      filter: JSON.stringify({ teamId: match.team1Id }),
    });
    const qs2 = new URLSearchParams({
      range: JSON.stringify([0, 199]),
      sort: JSON.stringify(['name', 'ASC']),
      filter: JSON.stringify({ teamId: match.team2Id }),
    });
    const [r1, r2] = await Promise.all([
      fetch(`${API_PLAYERS}?${qs1}`),
      fetch(`${API_PLAYERS}?${qs2}`),
    ]);
    const [d1, d2] = await Promise.all([r1.json(), r2.json()]);
    if (!r1.ok) throw new Error(d1?.error || `HTTP ${r1.status}`);
    if (!r2.ok) throw new Error(d2?.error || `HTTP ${r2.status}`);
    setTeam1Players(Array.isArray(d1) ? d1 : []);
    setTeam2Players(Array.isArray(d2) ? d2 : []);
  }
  async function loadRefs() {
    const params = new URLSearchParams({
      range: JSON.stringify([0, 199]),
      sort: JSON.stringify(['name', 'ASC']),
      filter: JSON.stringify({}),
    });
    const res = await fetch(`${API_REFS}?${params.toString()}`);
    const data = await res.json();
    if (!res.ok) throw new Error(data?.error || `HTTP ${res.status}`);
    setReferees(Array.isArray(data) ? data : []);
  }

  // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–∞—Ç—á–∞ (PlayerMatch ‚Üí player)
  async function loadMatchParticipants() {
    const byTeam = (list, teamId) =>
      (Array.isArray(list) ? list : [])
        .filter((pm) => pm?.player && pm.player.teamId === teamId)
        .map((pm) => pm.player);

    // –í–∞—Ä–∏–∞–Ω—Ç 1: /matches/:id?include=participants,participants.player
    try {
      const res = await fetch(
        `${API_MATCHES}/${match.id}?include=participants,participants.player`
      );
      const data = await res.json();
      if (res.ok && Array.isArray(data?.participants)) {
        const t1 = byTeam(data.participants, match.team1Id);
        const t2 = byTeam(data.participants, match.team2Id);
        if (t1.length || t2.length) {
          setLineup1(t1);
          setLineup2(t2);
          setLineupFallback(false);
          return;
        }
      }
    } catch {}

    // –í–∞—Ä–∏–∞–Ω—Ç 2: /matches/:id/participants
    try {
      const res = await fetch(`${API_MATCHES}/${match.id}/participants`);
      const data = await res.json();
      if (res.ok && Array.isArray(data)) {
        const t1 = byTeam(data, match.team1Id);
        const t2 = byTeam(data, match.team2Id);
        if (t1.length || t2.length) {
          setLineup1(t1);
          setLineup2(t2);
          setLineupFallback(false);
          return;
        }
      }
    } catch {}

    // –§–æ–ª–±—ç–∫ ‚Äî —Å–æ—Å—Ç–∞–≤–∞ –Ω–µ—Ç/–Ω–µ –ø—Ä–∏—à—ë–ª
    setLineup1([]);
    setLineup2([]);
    setLineupFallback(true);
  }

  // –ö—ç—à –∏–≥—Ä–æ–∫–æ–≤ –ø–æ id
  const playerIndex = useMemo(() => {
    const m = new Map();
    [...team1Players, ...team2Players, ...lineup1, ...lineup2].forEach((p) => {
      if (p?.id) m.set(p.id, p);
    });
    return m;
  }, [team1Players, team2Players, lineup1, lineup2]);

  // –ö—ç—à —Å—É–¥–µ–π –ø–æ id
  const refereeIndex = useMemo(() => {
    const m = new Map();
    (referees || []).forEach((r) => {
      if (r?.id) m.set(r.id, r);
    });
    return m;
  }, [referees]);

  const playerLabelById = (id) => {
    const p = playerIndex.get(Number(id));
    if (!p) return id ? `#${id}` : '';
    return `${p.number ? `#${p.number} ` : ''}${p.name}`;
  };
  const pn = (pObj, id) => {
    if (pObj && (pObj.name || pObj.number != null)) {
      return `${pObj.number ? `#${pObj.number} ` : ''}${pObj.name}`;
    }
    return playerLabelById(id);
  };

  const refNameById = (id) => {
    const r = refereeIndex.get(Number(id));
    return r?.name || (id != null ? `#${id}` : '');
  };

  // –£–º–Ω—ã–π —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –∏–º–µ–Ω–∏ —Å—É–¥—å–∏ –∏–∑ —Å–æ–±—ã—Ç–∏—è
  const getRefereeName = (e) => {
    if (!e) return '';
    // 1) –µ—Å–ª–∏ –±—ç–∫–µ–Ω–¥ –≤–µ—Ä–Ω—É–ª —Å–≤—è–∑–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
    if (e.issuedByReferee?.name) return e.issuedByReferee.name;
    if (e.referee?.name) return e.referee.name;

    // 2) –Ω–∞–π—Ç–∏ –ª—é–±–æ–π nested-–æ–±—ä–µ–∫—Ç *referee* —Å name
    for (const [k, v] of Object.entries(e)) {
      if (
        k.toLowerCase().includes('referee') &&
        v &&
        typeof v === 'object' &&
        v.name
      ) {
        return v.name;
      }
    }

    // 3) —Ñ–æ–ª–±—ç–∫: –ø–æ id-–ø–æ–ª—é –≤—ã—Ç—è–Ω—É—Ç—å –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —Å—É–¥–µ–π
    const idKey = Object.keys(e).find((k) => {
      const lk = k.toLowerCase();
      const val = e[k];
      return (
        (lk.endsWith('refereeid') || lk.includes('referee')) &&
        (typeof val === 'number' || typeof val === 'string')
      );
    });
    if (idKey) return refNameById(e[idKey]) || '';

    return '';
  };

  const getRefereeId = (e) => {
    if (!e) return '';
    if (e.issuedByRefereeId != null) return e.issuedByRefereeId;
    if (e.refereeId != null) return e.refereeId;
    if (e.issued_by_referee_id != null) return e.issued_by_referee_id;
    if (e.issuedByReferee?.id != null) return e.issuedByReferee.id;
    if (e.referee?.id != null) return e.referee.id;
    // –ø–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –ø–µ—Ä–≤—ã–π nested referee —Å id
    for (const [k, v] of Object.entries(e)) {
      if (
        k.toLowerCase().includes('referee') &&
        v &&
        typeof v === 'object' &&
        (v.id != null || v.refereeId != null)
      ) {
        return v.id ?? v.refereeId ?? '';
      }
    }
    return '';
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π (—Å attempt include + —Ñ–æ–ª–±—ç–∫–æ–º) + –ø–µ—Ä–µ—Å—á—ë—Ç —Å—á—ë—Ç–∞
  async function loadEvents() {
    const params = new URLSearchParams({
      range: JSON.stringify([0, 999]),
      sort: JSON.stringify(['id', 'ASC']),
      filter: JSON.stringify({ matchId: match.id }),
    });

    let url = `${API_EVENTS}?${params.toString()}&include=player,assist_player,issuedByReferee,referee,team`;
    let res = await fetch(url);
    let data = await res.json().catch(() => []);
    if (!res.ok) {
      res = await fetch(`${API_EVENTS}?${params.toString()}`);
      data = await res.json().catch(() => []);
      if (!res.ok) throw new Error(data?.error || `HTTP ${res.status}`);
    }
    const list = Array.isArray(data) ? data : [];
    setEvents(list);
    // –ø–µ—Ä–µ—Å—á—ë—Ç —Å—á—ë—Ç–∞ –ø–æ —Å–æ–±—ã—Ç–∏—è–º
    const { s1, s2 } = calcScoreFromEvents(list);
    setScore1(s1);
    setScore2(s2);
    onScoreChanged?.(match.id, { team1Score: s1, team2Score: s2 });
  }

  const calcScoreFromEvents = (list) => {
    const goals = new Map(); // teamId -> count
    (list || []).forEach((e) => {
      if (e.type === 'GOAL' || e.type === 'PENALTY_SCORED') {
        goals.set(e.teamId, (goals.get(e.teamId) || 0) + 1);
      }
    });
    return {
      s1: goals.get(match.team1Id) || 0,
      s2: goals.get(match.team2Id) || 0,
    };
  };

  useEffect(() => {
    (async () => {
      try {
        setLoading(true);
        setErr('');
        await Promise.all([
          loadLeague(),
          loadPlayers(),
          loadRefs(),
          loadMatchParticipants(),
          loadEvents(),
        ]);
        setStatus(match.status || 'SCHEDULED');
      } catch (e) {
        console.error(e);
        setErr(e.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–∞—Ç—á–∞');
      } finally {
        setLoading(false);
      }
    })();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [match.id]);

  // --- —Ç–∞–π–º–µ—Ä
  useEffect(() => {
    if (!running) {
      if (tickRef.current) {
        clearInterval(tickRef.current);
        tickRef.current = null;
      }
      return;
    }
    if (!halfStartTS) setHalfStartTS(Date.now());
    tickRef.current = setInterval(() => {
      setElapsed(Math.floor((Date.now() - (halfStartTS ?? Date.now())) / 1000));
    }, 1000);
    return () => {
      if (tickRef.current) {
        clearInterval(tickRef.current);
        tickRef.current = null;
      }
    };
  }, [running, halfStartTS]);

  const halfMinuteNow = useMemo(() => {
    const m = Math.floor(elapsed / 60) + 1;
    return clamp(m, 1, Number(halfMinutes) || 45);
  }, [elapsed, halfMinutes]);

  const mm = fmt2(Math.floor(elapsed / 60));
  const ss = fmt2(elapsed % 60);

  function startPause() {
    if (running) setRunning(false);
    else {
      setHalfStartTS(Date.now() - elapsed * 1000);
      setRunning(true);
    }
  }
  function finishHalf() {
    setRunning(false);
    setElapsed(0);
    setHalfStartTS(null);
  }
  function nextHalf() {
    finishHalf();
    setCurrentHalf((h) => clamp(h + 1, 1, halves));
  }
  function prevHalf() {
    finishHalf();
    setCurrentHalf((h) => clamp(h - 1, 1, halves));
  }

  const teamTitleById = (id) =>
    id === match.team1Id
      ? match.team1?.title || `#${match.team1Id}`
      : id === match.team2Id
      ? match.team2?.title || `#${match.team2Id}`
      : `#${id}`;

  const renderEventText = (e) => {
    const judge = getRefereeName(e);
    switch (e.type) {
      case 'GOAL':
        return `–ì–æ–ª ‚Äî ${pn(e.player, e.playerId)}${
          e.assist_player || e.assistPlayerId
            ? ` (–∞—Å—Å–∏—Å—Ç: ${pn(e.assist_player, e.assistPlayerId)})`
            : ''
        }`;
      case 'PENALTY_SCORED':
        return `–ì–æ–ª —Å –ø–µ–Ω–∞–ª—å—Ç–∏ ‚Äî ${pn(e.player, e.playerId)}`;
      case 'PENALTY_MISSED':
        return `–ü–µ–Ω–∞–ª—å—Ç–∏ –Ω–µ –∑–∞–±–∏—Ç ‚Äî ${pn(e.player, e.playerId)}`;
      case 'YELLOW_CARD':
        return `–ñ–ö ‚Äî ${pn(e.player, e.playerId)}${
          judge ? ` (—Å—É–¥—å—è: ${judge})` : ''
        }`;
      case 'RED_CARD':
        return `–ö–ö ‚Äî ${pn(e.player, e.playerId)}${
          judge ? ` (—Å—É–¥—å—è: ${judge})` : ''
        }`;
      default:
        return e.type || '–°–æ–±—ã—Ç–∏–µ';
    }
  };

  async function submitEvent(side, form) {
    try {
      setLoading(true);
      setErr('');
      if (!form.type) throw new Error('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è');
      const teamId = side === 1 ? match.team1Id : match.team2Id;
      const minuteToSend = Number(form.minute) || halfMinuteNow;

      const refId = form.refereeId ? Number(form.refereeId) : null;

      const payload = {
        matchId: match.id,
        teamId,
        type: form.type,
        half: currentHalf,
        minute: minuteToSend,
        playerId: form.playerId ? Number(form.playerId) : null,
        assistPlayerId: form.assistPlayerId
          ? Number(form.assistPlayerId)
          : null,
        description: form.description || null,

        // —Å—É–¥—å—è ‚Äî —à–ª—ë–º –≤–æ –≤—Å–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ–ª—è, —á—Ç–æ–±—ã –±—ç–∫—É –±—ã–ª–æ –ø—Ä–æ—â–µ –ø—Ä–∏–Ω—è—Ç—å
        issuedByRefereeId: refId, // camelCase (–≤–∞—à–∞ —Å—Ö.)
        refereeId: refId, // –∫–æ—Ä–æ—Ç–∫–æ–µ
        issued_by_referee_id: refId, // snake_case ‚Äî –Ω–∞ –≤—Å—è–∫–∏–π
      };

      const res = await fetch(API_EVENTS, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload),
      });
      const data = await res.json().catch(() => ({}));
      if (!res.ok) throw new Error(data?.error || `HTTP ${res.status}`);

      await loadEvents();
      if (side === 1) setEvt1({ ...initialEvt, minute: '' });
      else setEvt2({ ...initialEvt, minute: '' });
    } catch (e) {
      console.error(e);
      setErr(e.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ');
    } finally {
      setLoading(false);
    }
  }

  /* ---------- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ / —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è ---------- */
  const showPlayerForType = (t) =>
    [
      'GOAL',
      'PENALTY_SCORED',
      'PENALTY_MISSED',
      'YELLOW_CARD',
      'RED_CARD',
    ].includes(t);
  const showAssistForType = (t) => t === 'GOAL';
  const showRefForType = (t) => t === 'YELLOW_CARD' || t === 'RED_CARD';

  function startEditEvent(e) {
    setEditEventId(e.id);
    setEditDraft({
      type: e.type || 'GOAL',
      half: e.half ?? 1,
      minute: e.minute ?? '',
      playerId: e.playerId ?? '',
      assistPlayerId: e.assistPlayerId ?? '',
      refereeId: getRefereeId(e) ?? '',
      description: e.description || '',
      _teamId: e.teamId, // –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
    });
  }
  function cancelEditEvent() {
    setEditEventId(null);
    setEditDraft({
      type: '',
      half: 1,
      minute: '',
      playerId: '',
      assistPlayerId: '',
      refereeId: '',
      description: '',
    });
  }

  async function saveEditEvent() {
    if (!editEventId) return;
    try {
      setLoading(true);
      setErr('');
      const refId = editDraft.refereeId ? Number(editDraft.refereeId) : null;
      const payload = {
        type: editDraft.type,
        half: Number(editDraft.half) || 1,
        minute: Number(editDraft.minute) || 1,
        playerId: editDraft.playerId ? Number(editDraft.playerId) : null,
        assistPlayerId: editDraft.assistPlayerId
          ? Number(editDraft.assistPlayerId)
          : null,
        description: editDraft.description || null,
        issuedByRefereeId: refId,
        refereeId: refId,
        issued_by_referee_id: refId,
      };
      const res = await fetch(`${API_EVENTS}/${editEventId}`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload),
      });
      const data = await res.json().catch(() => ({}));
      if (!res.ok) throw new Error(data?.error || `HTTP ${res.status}`);
      cancelEditEvent();
      await loadEvents();
    } catch (e) {
      console.error(e);
      setErr(e.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è');
    } finally {
      setLoading(false);
    }
  }

  async function deleteEvent(id) {
    if (!window.confirm('–£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ?')) return;
    try {
      setLoading(true);
      setErr('');
      const res = await fetch(`${API_EVENTS}/${id}`, { method: 'DELETE' });
      const data = await res.json().catch(() => ({}));
      if (!res.ok) throw new Error(data?.error || `HTTP ${res.status}`);
      if (editEventId === id) cancelEditEvent();
      await loadEvents();
    } catch (e) {
      console.error(e);
      setErr(e.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ');
    } finally {
      setLoading(false);
    }
  }

  /* ---------- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–∞—Ç—á–∞ ---------- */
  async function finishMatch() {
    try {
      if (!window.confirm('–ó–∞–≤–µ—Ä—à–∏—Ç—å –º–∞—Ç—á? –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ ¬´–ó–∞–≤–µ—Ä—à—ë–Ω¬ª.'))
        return;
      setLoading(true);
      setErr('');
      setRunning(false);

      const payload = {
        status: 'FINISHED',
        team1Score: Number(score1) || 0,
        team2Score: Number(score2) || 0,
      };
      const res = await fetch(`${API_MATCHES}/${match.id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload),
      });
      const data = await res.json().catch(() => ({}));
      if (!res.ok) throw new Error(data?.error || `HTTP ${res.status}`);

      setStatus('FINISHED');
    } catch (e) {
      console.error(e);
      setErr(e.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –º–∞—Ç—á');
    } finally {
      setLoading(false);
    }
  }

  /* ---------- MVP –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏ –ø–∞–Ω–µ–ª—å ---------- */
  const mvpStats = useMemo(() => {
    // –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º –ø–æ –∏–≥—Ä–æ–∫—É
    const map = new Map(); // playerId -> {goals, pens, assists, yc, rc, pmissed, teamId}
    const inc = (pid, key, teamId) => {
      if (!pid) return;
      const row = map.get(pid) || {
        goals: 0,
        pens: 0,
        assists: 0,
        yc: 0,
        rc: 0,
        pmissed: 0,
        teamId,
      };
      row[key] = (row[key] || 0) + 1;
      if (!row.teamId && teamId) row.teamId = teamId;
      map.set(pid, row);
    };
    (events || []).forEach((e) => {
      if (e.type === 'GOAL') inc(e.playerId, 'goals', e.teamId);
      if (e.type === 'PENALTY_SCORED') inc(e.playerId, 'pens', e.teamId);
      if (e.type === 'PENALTY_MISSED') inc(e.playerId, 'pmissed', e.teamId);
      if (e.type === 'YELLOW_CARD') inc(e.playerId, 'yc', e.teamId);
      if (e.type === 'RED_CARD') inc(e.playerId, 'rc', e.teamId);
      if (e.assistPlayerId) inc(e.assistPlayerId, 'assists', e.teamId);
    });

    // –æ—á–∫–∏
    const winner =
      score1 > score2 ? match.team1Id : score2 > score1 ? match.team2Id : null;

    const rows = [...map.entries()].map(([playerId, r]) => {
      let score =
        r.goals * 3 +
        r.pens * 2 +
        r.assists * 2 -
        r.yc * 1 -
        r.rc * 3 -
        r.pmissed * 2;
      // –º–∞–ª–µ–Ω—å–∫–∏–π –±–æ–Ω—É—Å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º, –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–æ–∂–∏—Ç. –≤–∫–ª–∞–¥
      if (winner && r.teamId === winner && r.goals + r.pens + r.assists > 0) {
        score += 1;
      }
      return {
        playerId: Number(playerId),
        name: playerLabelById(playerId),
        number: playerIndex.get(Number(playerId))?.number,
        teamId: r.teamId,
        score,
        goals: r.goals + r.pens,
        assists: r.assists,
        yc: r.yc,
        rc: r.rc,
      };
    });

    rows.sort((a, b) => {
      if (b.score !== a.score) return b.score - a.score;
      if (b.goals !== a.goals) return b.goals - a.goals;
      if (b.assists !== a.assists) return b.assists - a.assists;
      if (a.rc !== b.rc) return a.rc - b.rc; // –º–µ–Ω—å—à–µ –ö–ö –ª—É—á—à–µ
      if (a.yc !== b.yc) return a.yc - b.yc; // –º–µ–Ω—å—à–µ –ñ–ö –ª—É—á—à–µ
      return a.playerId - b.playerId;
    });

    return {
      best: rows[0] || null,
      top: rows.slice(0, 5),
    };
  }, [events, score1, score2, playerIndex]);

  const [showMvp, setShowMvp] = useState(false);

  /* ---------- –ü—Ä–æ—Ç–æ–∫–æ–ª: HTML-–æ—Å–Ω–æ–≤–∞–Ω–∏–µ ---------- */
  function buildProtocolHtml() {
    const t1 = match.team1?.title || `#${match.team1Id}`;
    const t2 = match.team2?.title || `#${match.team2Id}`;

    const lineupTable = (title, arr, noteIfEmpty) => {
      const rows = (arr || []).map(
        (p) =>
          `<tr><td style="text-align:right;width:70px">${
            p.number ?? ''
          }</td><td>${escapeHtml(p.name || '')}</td></tr>`
      );
      const note = noteIfEmpty
        ? `<div class="note">–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–æ—Å—Ç–∞–≤ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω. –ü–æ–∫–∞–∑–∞–Ω –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã.</div>`
        : '';
      return `
        <div class="block">
          <h3>${escapeHtml(title)}</h3>
          ${note}
          <table class="tbl">
            <thead><tr><th style="width:70px">‚Ññ</th><th>–ò–≥—Ä–æ–∫</th></tr></thead>
            <tbody>${rows.join('') || '<tr><td colspan="2">‚Äî</td></tr>'}</tbody>
          </table>
        </div>`;
    };

    const eventRows = (events || []).map((e) => {
      const typeLabel = EVENT_TYPE_LABEL[e.type] || e.type;
      const player = pn(e.player, e.playerId) || '‚Äî';
      const assist =
        e.assist_player || e.assistPlayerId
          ? pn(e.assist_player, e.assistPlayerId)
          : '‚Äî';
      const ref = getRefereeName(e) || '‚Äî';
      const team = e.team?.title || teamTitleById(e.teamId);
      return `<tr>
        <td style="text-align:center">${e.half ?? ''}</td>
        <td style="text-align:center">${e.minute ?? ''}'</td>
        <td>${escapeHtml(typeLabel)}</td>
        <td>${escapeHtml(player)}</td>
        <td>${escapeHtml(assist)}</td>
        <td>${escapeHtml(ref)}</td>
        <td>${escapeHtml(team)}</td>
        <td>${escapeHtml(e.description || '')}</td>
      </tr>`;
    });

    const html = `<!doctype html>
<html lang="ru">
<meta charset="utf-8">
<title>–ü—Ä–æ—Ç–æ–∫–æ–ª –º–∞—Ç—á–∞ #${match.id}</title>
<style>
  body{font:14px/1.42 -apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Arial,sans-serif;color:#111;padding:24px;}
  h1{margin:0 0 6px 0;font-size:22px}
  h2{margin:18px 0 6px 0;font-size:18px}
  h3{margin:12px 0 6px 0;font-size:16px}
  .meta{color:#444;margin-bottom:10px}
  .score{font-size:28px;font-weight:800;margin:8px 0 12px 0}
  .grid2{display:grid;grid-template-columns:1fr 1fr;gap:16px}
  .tbl{width:100%;border-collapse:collapse}
  .tbl th,.tbl td{border:1px solid #ddd;padding:6px 8px;vertical-align:top}
  .tbl thead th{background:#f8f9fb}
  .note{font-size:12px;color:#666;margin:8px 0}
  .block{break-inside:avoid}
  @media print {.no-print{display:none}}
</style>
<body>
  <h1>–ü—Ä–æ—Ç–æ–∫–æ–ª –º–∞—Ç—á–∞ ‚Ññ${match.id}</h1>
  <div class="meta">
    ${escapeHtml(t1)} ‚Äî ${escapeHtml(t2)}<br>
    –î–∞—Ç–∞: ${escapeHtml(dtLoc(match.date))} ‚Ä¢ –°—Ç–∞—Ç—É—Å: ${escapeHtml(
      statusRu(status)
    )}
  </div>

  <h2>–°—á—ë—Ç</h2>
  <div class="score">${escapeHtml(t1)} ‚Äî ${escapeHtml(t2)}: <b>${Number(
      score1
    )}</b>:<b>${Number(score2)}</b></div>

  <h2>–°–æ–±—ã—Ç–∏—è</h2>
  <table class="tbl">
    <thead>
      <tr>
        <th style="width:60px">–¢–∞–π–º</th>
        <th style="width:70px">–ú–∏–Ω—É—Ç–∞</th>
        <th style="width:160px">–¢–∏–ø</th>
        <th style="width:160px">–ò–≥—Ä–æ–∫</th>
        <th style="width:160px">–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç</th>
        <th style="width:150px">–°—É–¥—å—è</th>
        <th style="min-width:180px">–ö–æ–º–∞–Ω–¥–∞</th>
        <th>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</th>
      </tr>
    </thead>
    <tbody>${
      eventRows.join('') || '<tr><td colspan="8">–°–æ–±—ã—Ç–∏–π –Ω–µ—Ç</td></tr>'
    }</tbody>
  </table>

  <h2>–°–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥</h2>
  <div class="grid2">
    ${lineupTable(
      `${t1} ‚Äî —Å–æ—Å—Ç–∞–≤`,
      lineup1 && lineup1.length ? lineup1 : team1Players,
      !(lineup1 && lineup1.length)
    )}
    ${lineupTable(
      `${t2} ‚Äî —Å–æ—Å—Ç–∞–≤`,
      lineup2 && lineup2.length ? lineup2 : team2Players,
      !(lineup2 && lineup2.length)
    )}
  </div>
</body>
</html>`;
    return html;
  }

  /* ---------- DOCX ---------- */
  async function downloadReportDocx() {
    try {
      setLoading(true);
      const docx = await import('docx'); // –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç
      const {
        Document,
        Packer,
        Paragraph,
        TextRun,
        Table,
        TableRow,
        TableCell,
        WidthType,
        HeadingLevel,
        AlignmentType,
        BorderStyle,
      } = docx;

      const t1 = match.team1?.title || `#${match.team1Id}`;
      const t2 = match.team2?.title || `#${match.team2Id}`;

      const H = (text, level = HeadingLevel.HEADING_2) =>
        new Paragraph({ text, heading: level });

      const P = (text, opts = {}) =>
        new Paragraph({
          children: [new TextRun(String(text || ''))],
          ...opts,
        });

      const makeTable = (headCells, rows) => {
        const head = new TableRow({
          children: headCells.map(
            (c) =>
              new TableCell({
                children: [P(c)],
              })
          ),
        });
        const body = rows.map(
          (r) =>
            new TableRow({
              children: r.map((c) => new TableCell({ children: [P(c)] })),
            })
        );
        return new Table({
          width: { size: 100, type: WidthType.PERCENTAGE },
          rows: [head, ...body],
          borders: {
            top: { style: BorderStyle.SINGLE, size: 1, color: 'DDDDDD' },
            bottom: { style: BorderStyle.SINGLE, size: 1, color: 'DDDDDD' },
            left: { style: BorderStyle.SINGLE, size: 1, color: 'DDDDDD' },
            right: { style: BorderStyle.SINGLE, size: 1, color: 'DDDDDD' },
            insideHorizontal: {
              style: BorderStyle.SINGLE,
              size: 1,
              color: 'DDDDDD',
            },
            insideVertical: {
              style: BorderStyle.SINGLE,
              size: 1,
              color: 'DDDDDD',
            },
          },
        });
      };

      // –°—á—ë—Ç
      const scorePara = new Paragraph({
        alignment: AlignmentType.LEFT,
        children: [
          new TextRun(`${t1} ‚Äî ${t2}: `),
          new TextRun({ text: String(Number(score1)), bold: true }),
          new TextRun(':'),
          new TextRun({ text: String(Number(score2)), bold: true }),
        ],
      });

      // –¢–∞–±–ª–∏—Ü–∞ —Å–æ–±—ã—Ç–∏–π
      const eventRows = (events || []).map((e) => [
        String(e.half ?? ''),
        `${e.minute ?? ''}'`,
        EVENT_TYPE_LABEL[e.type] || e.type,
        pn(e.player, e.playerId) || '‚Äî',
        e.assist_player || e.assistPlayerId
          ? pn(e.assist_player, e.assistPlayerId)
          : '‚Äî',
        getRefereeName(e) || '‚Äî',
        e.team?.title || teamTitleById(e.teamId),
        e.description || '',
      ]);

      // –°–æ—Å—Ç–∞–≤—ã
      const listOrFallback = (line, all) =>
        line && line.length ? line : all || [];
      const lineupRows1 = listOrFallback(lineup1, team1Players).map((p) => [
        String(p.number ?? ''),
        p.name || '',
      ]);
      const lineupRows2 = listOrFallback(lineup2, team2Players).map((p) => [
        String(p.number ?? ''),
        p.name || '',
      ]);

      const doc = new Document({
        sections: [
          {
            properties: {
              page: {
                margin: { top: 720, right: 720, bottom: 720, left: 720 },
              }, // 1" margins
            },
            children: [
              H(`–ü—Ä–æ—Ç–æ–∫–æ–ª –º–∞—Ç—á–∞ ‚Ññ${match.id}`, HeadingLevel.HEADING_1),
              P(`${t1} ‚Äî ${t2}`),
              P(`–î–∞—Ç–∞: ${dtLoc(match.date)} ‚Ä¢ –°—Ç–∞—Ç—É—Å: ${statusRu(status)}`),
              H('–°—á—ë—Ç'),
              scorePara,
              H('–°–æ–±—ã—Ç–∏—è'),
              makeTable(
                [
                  '–¢–∞–π–º',
                  '–ú–∏–Ω—É—Ç–∞',
                  '–¢–∏–ø',
                  '–ò–≥—Ä–æ–∫',
                  '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç',
                  '–°—É–¥—å—è',
                  '–ö–æ–º–∞–Ω–¥–∞',
                  '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
                ],
                eventRows.length
                  ? eventRows
                  : [['‚Äî', '‚Äî', '–°–æ–±—ã—Ç–∏–π –Ω–µ—Ç', '‚Äî', '‚Äî', '‚Äî', '‚Äî', '‚Äî']]
              ),
              H('–°–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥'),
              H(`${t1} ‚Äî —Å–æ—Å—Ç–∞–≤`, HeadingLevel.HEADING_3),
              makeTable(
                ['‚Ññ', '–ò–≥—Ä–æ–∫'],
                lineupRows1.length ? lineupRows1 : [['‚Äî', '‚Äî']]
              ),
              ...(lineup1 && lineup1.length
                ? []
                : [
                    P(
                      '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–æ—Å—Ç–∞–≤ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω. –ü–æ–∫–∞–∑–∞–Ω –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã.'
                    ),
                  ]),
              H(`${t2} ‚Äî —Å–æ—Å—Ç–∞–≤`, HeadingLevel.HEADING_3),
              makeTable(
                ['‚Ññ', '–ò–≥—Ä–æ–∫'],
                lineupRows2.length ? lineupRows2 : [['‚Äî', '‚Äî']]
              ),
              ...(lineup2 && lineup2.length
                ? []
                : [
                    P(
                      '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–æ—Å—Ç–∞–≤ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω. –ü–æ–∫–∞–∑–∞–Ω –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã.'
                    ),
                  ]),
            ],
          },
        ],
      });

      const blob = await Packer.toBlob(doc);
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `match_${match.id}_protocol.docx`;
      document.body.appendChild(a);
      a.click();
      a.remove();
      URL.revokeObjectURL(url);
    } catch (e) {
      console.error(e);
      alert(
        '–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å DOCX. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–∞–∫–µ—Ç "docx".'
      );
    } finally {
      setLoading(false);
    }
  }

  /* ---------- PDF (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ---------- */
  async function downloadReportPdf() {
    try {
      setLoading(true);
      const html2pdf = (await import('html2pdf.js')).default;
      const html = buildProtocolHtml();
      const el = document.createElement('div');
      el.style.position = 'fixed';
      el.style.left = '-99999px';
      el.innerHTML = html;
      document.body.appendChild(el);

      await html2pdf()
        .from(el)
        .set({
          margin: 10,
          filename: `match_${match.id}_protocol.pdf`,
          image: { type: 'jpeg', quality: 0.98 },
          html2canvas: { scale: 2, useCORS: true },
          jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' },
        })
        .save();

      document.body.removeChild(el);
    } catch (e) {
      console.error(e);
      alert(
        '–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å PDF. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–∞–∫–µ—Ç "html2pdf.js".'
      );
    } finally {
      setLoading(false);
    }
  }

  /* --------- –°–∞–π–¥-–ø–∞–Ω–µ–ª—å: —Å–ª–µ–≤–∞/—Å–ø—Ä–∞–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤–∞—è --------- */
  const SidePanel = ({ side }) => {
    const isHome = side === 1;
    const teamTitle = isHome
      ? match.team1?.title || `#${match.team1Id}`
      : match.team2?.title || `#${match.team2Id}`;

    const players = (isHome ? lineup1 : lineup2)?.length
      ? isHome
        ? lineup1
        : lineup2
      : isHome
      ? team1Players
      : team2Players;

    const form = isHome ? evt1 : evt2;
    const setForm = isHome ? setEvt1 : setEvt2;

    const showPlayer = showPlayerForType(form.type);
    const showAssist = showAssistForType(form.type);
    const showRef = showRefForType(form.type);

    return (
      <div
        className={`event-panel ${
          isHome ? 'event-panel--home' : 'event-panel--away'
        }`}
      >
        <div className="event-panel__team">
          {teamTitle}
          {lineupFallback && (
            <span className="muted fallback-note">
              (—Å–æ—Å—Ç–∞–≤ –Ω–∞ –º–∞—Ç—á –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω)
            </span>
          )}
        </div>

        <div className="event-types">
          {EVENT_TYPES.map((t) => (
            <button
              key={t.key}
              type="button"
              onClick={() => setForm((s) => ({ ...s, type: t.key }))}
              className={`event-type ${form.type === t.key ? 'is-active' : ''}`}
            >
              <span className="event-type__icon" aria-hidden>
                {t.icon}
              </span>
              <span className="event-type__label">{t.label}</span>
            </button>
          ))}
        </div>

        {/* –§–û–†–ú–ê –í–°–ï–ì–î–ê –Ω–∞ –º–µ—Å—Ç–µ ‚Äî –±–µ–∑ —Å–∫–∞—á–∫–æ–≤ –≤–µ—Ä—Å—Ç–∫–∏ */}
        <div className="card event-form">
          {!form.type ? (
            <div className="event-form__empty">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è —Å–≤–µ—Ä—Ö—É</div>
          ) : (
            <div className="event-form__inner">
              <div className="form__row">
                {showPlayer && (
                  <label className="field">
                    <span className="field__label">
                      –ò–≥—Ä–æ–∫
                      {form.type === 'YELLOW_CARD' || form.type === 'RED_CARD'
                        ? ' (–ø–æ–ª—É—á–∏–ª)'
                        : ''}
                    </span>
                    <select
                      className="input"
                      value={form.playerId}
                      onChange={(e) =>
                        setForm((s) => ({ ...s, playerId: e.target.value }))
                      }
                    >
                      <option value="">‚Äî</option>
                      {players.map((p) => (
                        <option key={p.id} value={p.id}>
                          {p.number ? `#${p.number} ` : ''}
                          {p.name}
                        </option>
                      ))}
                    </select>
                  </label>
                )}

                {showAssist && (
                  <label className="field">
                    <span className="field__label">–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç</span>
                    <select
                      className="input"
                      value={form.assistPlayerId}
                      onChange={(e) =>
                        setForm((s) => ({
                          ...s,
                          assistPlayerId: e.target.value,
                        }))
                      }
                    >
                      <option value="">‚Äî</option>
                      {players.map((p) => (
                        <option key={p.id} value={p.id}>
                          {p.number ? `#${p.number} ` : ''}
                          {p.name}
                        </option>
                      ))}
                    </select>
                  </label>
                )}

                {showRef && (
                  <label className="field">
                    <span className="field__label">–°—É–¥—å—è</span>
                    <select
                      className="input"
                      value={form.refereeId}
                      onChange={(e) =>
                        setForm((s) => ({ ...s, refereeId: e.target.value }))
                      }
                    >
                      <option value="">‚Äî</option>
                      {referees.map((r) => (
                        <option key={r.id} value={r.id}>
                          {r.name}
                        </option>
                      ))}
                    </select>
                  </label>
                )}
              </div>

              <div className="form__row">
                <label className="field field--minute">
                  <span className="field__label">–ú–∏–Ω—É—Ç–∞</span>
                  <input
                    className="input"
                    type="number"
                    min={1}
                    max={Number(halfMinutes) || 45}
                    value={form.minute || halfMinuteNow}
                    onChange={(e) =>
                      setForm((s) => ({ ...s, minute: e.target.value }))
                    }
                  />
                </label>

                <label className="field field--grow">
                  <span className="field__label">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–æ–ø—Ü.)</span>
                  <input
                    className="input"
                    value={form.description}
                    onChange={(e) =>
                      setForm((s) => ({ ...s, description: e.target.value }))
                    }
                    placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä: —É–¥–∞—Ä —Å–ª—ë—Ç–∞ –≤ –¥–∞–ª—å–Ω–∏–π"
                  />
                </label>

                <div className="form__actions event-form__actions">
                  <button
                    className="btn btn--primary"
                    disabled={
                      loading ||
                      !form.type ||
                      (showPlayer && !form.playerId) ||
                      (showRef && !form.refereeId)
                    }
                    onClick={() => submitEvent(side, form)}
                  >
                    –ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ
                  </button>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    );
  };

  return (
    <div className="modal live-modal">
      <div className="modal__backdrop" onClick={onClose} />
      <div className="modal__dialog live-modal__dialog">
        <div className="modal__header">
          <h3 className="modal__title">
            –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –º–∞—Ç—á–∞: {match.team1?.title || `#${match.team1Id}`} ‚Äî{' '}
            {match.team2?.title || `#${match.team2Id}`}
          </h3>
          <button className="btn btn--ghost" onClick={onClose}>
            √ó
          </button>
        </div>

        <div className="modal__body">
          {err && <div className="alert alert--error">{err}</div>}
          {loading && <div className="alert">–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶</div>}

          <div className="live-threecol">
            {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å */}
            <SidePanel side={1} />

            {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ —Ç–∞–±–ª–æ */}
            <section className="card scoreboard">
              <div className="scoreboard__teams">
                <div className="scoreboard__team scoreboard__team--left">
                  {match.team1?.title || `#${match.team1Id}`}
                </div>
                <div className="scoreboard__team scoreboard__team--right">
                  {match.team2?.title || `#${match.team2Id}`}
                </div>
              </div>

              <div className="scoreboard__score">
                {score1}
                <span>:</span>
                {score2}
              </div>

              <div className="scoreboard__top">
                <div>
                  –í—Ä–µ–º—è:{' '}
                  <b>
                    {mm}:{ss}
                  </b>
                </div>
                <div>
                  –¢–∞–π–º: <b>{currentHalf}</b> / {halves}
                </div>
              </div>

              <div className="scoreboard__controls">
                <button className="btn btn--ghost" onClick={startPause}>
                  {running ? '–ü–∞—É–∑–∞' : '–°—Ç–∞—Ä—Ç'}
                </button>
                <button className="btn" onClick={finishHalf}>
                  –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–∞–π–º
                </button>

                <div className="scoreboard__nav">
                  <button
                    className="btn btn--ghost"
                    onClick={prevHalf}
                    disabled={currentHalf <= 1}
                  >
                    ‚Üê –ü—Ä–µ–¥. —Ç–∞–π–º
                  </button>
                  <button
                    className="btn btn--ghost"
                    onClick={nextHalf}
                    disabled={currentHalf >= halves}
                  >
                    –°–ª–µ–¥. —Ç–∞–π–º ‚Üí
                  </button>
                </div>
              </div>

              {status === 'FINISHED' && (
                <div className="scoreboard__downloads">
                  {/* <button className="btn btn--sm" onClick={downloadReportPdf}>
                    –°–∫–∞—á–∞—Ç—å PDF
                  </button> */}
                  <button className="btn btn--sm" onClick={downloadReportDocx}>
                    –°–∫–∞—á–∞—Ç—å DOCX
                  </button>
                </div>
              )}
            </section>

            {/* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å */}
            <SidePanel side={2} />
          </div>

          {/* –•—Ä–æ–Ω–æ–ª–æ–≥–∏—è */}
          <section className="card timeline">
            <div className="timeline__hdr">
              <h4 className="timeline__title">–•—Ä–æ–Ω–æ–ª–æ–≥–∏—è —Å–æ–±—ã—Ç–∏–π</h4>
              {status === 'FINISHED' && (
                <div className="row-actions">
                  {/* <button className="btn btn--sm" onClick={downloadReportPdf}>
                    –°–∫–∞—á–∞—Ç—å PDF
                  </button> */}
                  <button className="btn btn--sm" onClick={downloadReportDocx}>
                    –°–∫–∞—á–∞—Ç—å DOCX
                  </button>
                </div>
              )}
            </div>
            {events.length === 0 && (
              <div className="muted">–°–æ–±—ã—Ç–∏–π –ø–æ–∫–∞ –Ω–µ—Ç</div>
            )}
            {events.length > 0 && (
              <div className="table">
                <div className="table__head">
                  <div style={{ width: 60 }}>–¢–∞–π–º</div>
                  <div style={{ width: 70 }}>–ú–∏–Ω—É—Ç–∞</div>
                  <div style={{ width: 160 }}>–°–æ–±—ã—Ç–∏–µ</div>
                  <div style={{ minWidth: 180 }}>–ö–æ–º–∞–Ω–¥–∞</div>
                  <div style={{ minWidth: 200 }}>–ò–≥—Ä–æ–∫</div>
                  <div style={{ minWidth: 200 }}>–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç</div>
                  <div style={{ minWidth: 160 }}>–°—É–¥—å—è</div>
                  <div style={{ width: 160 }}>–î–µ–π—Å—Ç–≤–∏—è</div>
                </div>
                <div className="table__body">
                  {events.map((e) => {
                    const isEdit = editEventId === e.id;
                    const playersForTeam =
                      (e.teamId === match.team1Id
                        ? lineup1?.length
                          ? lineup1
                          : team1Players
                        : lineup2?.length
                        ? lineup2
                        : team2Players) || [];
                    const showPlayer = showPlayerForType(
                      isEdit ? editDraft.type : e.type
                    );
                    const showAssist = showAssistForType(
                      isEdit ? editDraft.type : e.type
                    );
                    const showRef = showRefForType(
                      isEdit ? editDraft.type : e.type
                    );

                    return (
                      <div className="table__row" key={e.id}>
                        {!isEdit ? (
                          <>
                            <div>{e.half}</div>
                            <div>{e.minute}'</div>
                            <div>{EVENT_TYPE_LABEL[e.type] || e.type}</div>
                            <div>
                              {e.team?.title || teamTitleById(e.teamId)}
                            </div>
                            <div>{pn(e.player, e.playerId) || '‚Äî'}</div>
                            <div>
                              {e.assist_player || e.assistPlayerId
                                ? pn(e.assist_player, e.assistPlayerId)
                                : '‚Äî'}
                            </div>
                            <div>{getRefereeName(e) || '‚Äî'}</div>
                            <div className="table__actions" style={{ gap: 8 }}>
                              <button
                                className="btn btn--xs"
                                onClick={() => startEditEvent(e)}
                              >
                                –ò–∑–º.
                              </button>
                              <button
                                className="btn btn--xs btn--danger"
                                onClick={() => deleteEvent(e.id)}
                              >
                                –£–¥–∞–ª–∏—Ç—å
                              </button>
                            </div>
                          </>
                        ) : (
                          <>
                            {/* –¢–∞–π–º */}
                            <div>
                              <input
                                className="input input--sm"
                                type="number"
                                min={1}
                                max={halves}
                                value={editDraft.half}
                                onChange={(ev) =>
                                  setEditDraft((s) => ({
                                    ...s,
                                    half: ev.target.value,
                                  }))
                                }
                                style={{ width: 60 }}
                              />
                            </div>
                            {/* –ú–∏–Ω—É—Ç–∞ */}
                            <div>
                              <input
                                className="input input--sm"
                                type="number"
                                min={1}
                                max={Number(halfMinutes) || 45}
                                value={editDraft.minute}
                                onChange={(ev) =>
                                  setEditDraft((s) => ({
                                    ...s,
                                    minute: ev.target.value,
                                  }))
                                }
                                style={{ width: 70 }}
                              />
                            </div>
                            {/* –¢–∏–ø */}
                            <div>
                              <select
                                className="input input--sm"
                                value={editDraft.type}
                                onChange={(ev) =>
                                  setEditDraft((s) => ({
                                    ...s,
                                    type: ev.target.value,
                                    // –µ—Å–ª–∏ –ø–æ–º–µ–Ω—è–ª–∏ —Ç–∏–ø, –≤–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å –ª–∏—à–Ω–∏–µ –ø–æ–ª—è
                                    assistPlayerId:
                                      ev.target.value === 'GOAL'
                                        ? s.assistPlayerId
                                        : '',
                                    refereeId: showRefForType(ev.target.value)
                                      ? s.refereeId
                                      : '',
                                  }))
                                }
                              >
                                {ALL_EVENT_TYPES.map((t) => (
                                  <option key={t} value={t}>
                                    {EVENT_TYPE_LABEL[t] || t}
                                  </option>
                                ))}
                              </select>
                            </div>
                            {/* –ö–æ–º–∞–Ω–¥–∞ (read-only) */}
                            <div>
                              {e.team?.title || teamTitleById(e.teamId)}
                            </div>
                            {/* –ò–≥—Ä–æ–∫ */}
                            <div>
                              {showPlayer ? (
                                <select
                                  className="input input--sm"
                                  value={editDraft.playerId}
                                  onChange={(ev) =>
                                    setEditDraft((s) => ({
                                      ...s,
                                      playerId: ev.target.value,
                                    }))
                                  }
                                >
                                  <option value="">‚Äî</option>
                                  {playersForTeam.map((p) => (
                                    <option key={p.id} value={p.id}>
                                      {p.number ? `#${p.number} ` : ''}
                                      {p.name}
                                    </option>
                                  ))}
                                </select>
                              ) : (
                                '‚Äî'
                              )}
                            </div>
                            {/* –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç */}
                            <div>
                              {showAssist ? (
                                <select
                                  className="input input--sm"
                                  value={editDraft.assistPlayerId}
                                  onChange={(ev) =>
                                    setEditDraft((s) => ({
                                      ...s,
                                      assistPlayerId: ev.target.value,
                                    }))
                                  }
                                >
                                  <option value="">‚Äî</option>
                                  {playersForTeam.map((p) => (
                                    <option key={p.id} value={p.id}>
                                      {p.number ? `#${p.number} ` : ''}
                                      {p.name}
                                    </option>
                                  ))}
                                </select>
                              ) : (
                                '‚Äî'
                              )}
                            </div>
                            {/* –°—É–¥—å—è */}
                            <div>
                              {showRef ? (
                                <select
                                  className="input input--sm"
                                  value={editDraft.refereeId}
                                  onChange={(ev) =>
                                    setEditDraft((s) => ({
                                      ...s,
                                      refereeId: ev.target.value,
                                    }))
                                  }
                                >
                                  <option value="">‚Äî</option>
                                  {referees.map((r) => (
                                    <option key={r.id} value={r.id}>
                                      {r.name}
                                    </option>
                                  ))}
                                </select>
                              ) : (
                                '‚Äî'
                              )}
                            </div>
                            {/* –î–µ–π—Å—Ç–≤–∏—è */}
                            <div className="table__actions" style={{ gap: 8 }}>
                              <button
                                className="btn btn--xs btn--primary"
                                onClick={saveEditEvent}
                                disabled={
                                  loading ||
                                  !editDraft.type ||
                                  (showPlayerForType(editDraft.type) &&
                                    !editDraft.playerId) ||
                                  (showRefForType(editDraft.type) &&
                                    !editDraft.refereeId)
                                }
                              >
                                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                              </button>
                              <button
                                className="btn btn--xs btn--ghost"
                                onClick={cancelEditEvent}
                              >
                                –û—Ç–º–µ–Ω–∞
                              </button>
                              <button
                                className="btn btn--xs btn--danger"
                                onClick={() => deleteEvent(e.id)}
                              >
                                –£–¥–∞–ª–∏—Ç—å
                              </button>
                            </div>
                          </>
                        )}
                      </div>
                    );
                  })}
                </div>
              </div>
            )}
          </section>

          {/* MVP –ø–∞–Ω–µ–ª—å (–ø–æ –∫–Ω–æ–ø–∫–µ) */}
          {showMvp && (
            <section className="card" style={{ marginTop: 12 }}>
              <div className="timeline__hdr">
                <h4 className="timeline__title">MVP –º–∞—Ç—á–∞</h4>
                <div className="row-actions">
                  <button
                    className="btn btn--sm btn--ghost"
                    onClick={() => setShowMvp(false)}
                  >
                    –ó–∞–∫—Ä—ã—Ç—å
                  </button>
                </div>
              </div>
              {!mvpStats.best ? (
                <div className="muted">
                  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–±—ã—Ç–∏—è—Ö, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å MVP.
                </div>
              ) : (
                <>
                  <div className="alert">
                    –õ—É—á—à–∏–π –ø–æ –≤–µ—Ä—Å–∏–∏ —Å–∏—Å—Ç–µ–º—ã: <b>{mvpStats.best.name}</b> (
                    {mvpStats.best.number ? `#${mvpStats.best.number}, ` : ''}
                    {teamTitleById(
                      playerIndex.get(mvpStats.best.playerId)?.teamId
                    )}
                    ) ‚Äî –æ—á–∫–∏: <b>{mvpStats.best.score}</b>, –≥–æ–ª—ã:{' '}
                    <b>{mvpStats.best.goals}</b>, –∞—Å—Å–∏—Å—Ç—ã:{' '}
                    <b>{mvpStats.best.assists}</b>
                  </div>
                  <div className="table">
                    <div className="table__head">
                      <div style={{ minWidth: 220 }}>–ò–≥—Ä–æ–∫</div>
                      <div style={{ width: 120 }}>–ö–æ–º–∞–Ω–¥–∞</div>
                      <div style={{ width: 80 }}>–û—á–∫–∏</div>
                      <div style={{ width: 80 }}>–ì–æ–ª—ã</div>
                      <div style={{ width: 80 }}>–ê—Å—Å–∏—Å—Ç—ã</div>
                      <div style={{ width: 80 }}>–ñ–ö</div>
                      <div style={{ width: 80 }}>–ö–ö</div>
                    </div>
                    <div className="table__body">
                      {mvpStats.top.map((r) => (
                        <div key={r.playerId} className="table__row">
                          <div>{r.name}</div>
                          <div>
                            {teamTitleById(playerIndex.get(r.playerId)?.teamId)}
                          </div>
                          <div>{r.score}</div>
                          <div>{r.goals}</div>
                          <div>{r.assists}</div>
                          <div>{r.yc}</div>
                          <div>{r.rc}</div>
                        </div>
                      ))}
                    </div>
                  </div>
                </>
              )}
            </section>
          )}
        </div>

        <div className="modal__footer">
          {status !== 'FINISHED' ? (
            <>
              <button
                className="btn btn--danger"
                onClick={finishMatch}
                disabled={loading}
              >
                –ó–∞–≤–µ—Ä—à–∏—Ç—å –º–∞—Ç—á
              </button>
              <div className="spacer" />
              <button className="btn" onClick={onClose}>
                –ó–∞–∫—Ä—ã—Ç—å
              </button>
            </>
          ) : (
            <>
              {/* <button className="btn" onClick={downloadReportPdf}>
                –°–∫–∞—á–∞—Ç—å PDF
              </button> */}
              <button className="btn" onClick={downloadReportDocx}>
                –°–∫–∞—á–∞—Ç—å DOCX
              </button>
              <button
                className="btn btn--ghost"
                onClick={() => setShowMvp((v) => !v)}
              >
                MVP –º–∞—Ç—á–∞
              </button>
              <div className="spacer" />
              <button className="btn btn--primary" onClick={onClose}>
                –ó–∞–∫—Ä—ã—Ç—å
              </button>
            </>
          )}
        </div>
      </div>
    </div>
  );
}

/* ===================== –ûc–Ω–æ–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ –º–∞—Ç—á–µ–π –ª–∏–≥–∏ ===================== */
export default function LeagueMatchesTab({ leagueId }) {
  const [matches, setMatches] = useState([]);
  const [teams, setTeams] = useState([]);
  const [stadiums, setStadiums] = useState([]);
  const [loading, setLoading] = useState(false);
  const [err, setErr] = useState('');

  const [showCreate, setShowCreate] = useState(false);

  const [form, setForm] = useState({
    date: '',
    team1Id: '',
    team2Id: '',
    stadiumId: '',
    team1Score: 0,
    team2Score: 0,
  });

  const resetForm = () =>
    setForm({
      date: '',
      team1Id: '',
      team2Id: '',
      stadiumId: '',
      team1Score: 0,
      team2Score: 0,
    });

  const [liveMatch, setLiveMatch] = useState(null);

  async function loadMatches() {
    const params = new URLSearchParams({
      range: JSON.stringify([0, 199]),
      sort: JSON.stringify(['date', 'ASC']),
      filter: JSON.stringify({ leagueId }),
    });
    const res = await fetch(`${API_MATCHES}?${params.toString()}`);
    const data = await res.json();
    if (!res.ok) throw new Error(data?.error || `HTTP ${res.status}`);
    setMatches(Array.isArray(data) ? data : []);
  }
  async function loadLeagueTeams() {
    const res = await fetch(`${API_LEAGUES}/${leagueId}/teams`);
    const data = await res.json();
    if (!res.ok) throw new Error(data?.error || `HTTP ${res.status}`);
    const list = Array.isArray(data)
      ? data.map((t) => (t.team ? t.team : t))
      : [];
    setTeams(list);
  }
  async function loadStadiums() {
    const params = new URLSearchParams({
      range: JSON.stringify([0, 999]),
      sort: JSON.stringify(['name', 'ASC']),
      filter: JSON.stringify({}),
    });
    const res = await fetch(`${serverConfig}/stadiums?${params.toString()}`);
    const data = await res.json();
    if (!res.ok) throw new Error(data?.error || `HTTP ${res.status}`);
    setStadiums(Array.isArray(data) ? data : []);
  }

  useEffect(() => {
    (async () => {
      try {
        setLoading(true);
        await Promise.all([loadMatches(), loadLeagueTeams(), loadStadiums()]);
      } catch (e) {
        console.error(e);
        setErr('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
      } finally {
        setLoading(false);
      }
    })();
  }, [leagueId]);

  async function createMatch(e) {
    e.preventDefault();
    setErr('');
    try {
      const payload = {
        leagueId: Number(leagueId),
        date: form.date || new Date().toISOString(),
        team1Id: Number(form.team1Id),
        team2Id: Number(form.team2Id),
        stadiumId: form.stadiumId ? Number(form.stadiumId) : null,
        status: 'SCHEDULED',
        team1Score: Number(form.team1Score) || 0,
        team2Score: Number(form.team2Score) || 0,
      };
      const res = await fetch(API_MATCHES, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload),
      });
      const data = await res.json().catch(() => ({}));
      if (!res.ok) throw new Error(data?.error || `HTTP ${res.status}`);
      resetForm();
      setShowCreate(false);
      await loadMatches();
    } catch (e) {
      console.error(e);
      setErr(e.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–∞—Ç—á');
    }
  }

  async function removeMatch(id) {
    if (!window.confirm('–£–¥–∞–ª–∏—Ç—å –º–∞—Ç—á?')) return;
    try {
      const res = await fetch(`${API_MATCHES}/${id}`, { method: 'DELETE' });
      if (!res.ok) throw new Error(`HTTP ${res.status}`);
      await loadMatches();
    } catch (e) {
      console.error(e);
      setErr('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –º–∞—Ç—á');
    }
  }

  const teamName = (id) => teams.find((t) => t.id === id)?.title || `#${id}`;

  const patchMatchScore = (matchId, { team1Score, team2Score }) => {
    setMatches((list) =>
      list.map((m) => (m.id === matchId ? { ...m, team1Score, team2Score } : m))
    );
  };

  return (
    <div className="grid onecol">
      <div className="toolbar">
        <button
          className="btn btn--primary"
          onClick={() =>
            setShowCreate((prev) => {
              const next = !prev;
              if (!next) resetForm();
              return next;
            })
          }
          disabled={loading}
        >
          {showCreate ? '–ó–∞–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É' : '–°–æ–∑–¥–∞—Ç—å –º–∞—Ç—á'}
        </button>
      </div>

      {showCreate && (
        <section className="card">
          <h3>–°–æ–∑–¥–∞—Ç—å –º–∞—Ç—á</h3>
          {err && <div className="alert alert--error">{err}</div>}
          <form className="form" onSubmit={createMatch}>
            <div className="form__row">
              <label className="field">
                <span className="field__label">–î–∞—Ç–∞</span>
                <input
                  className="input"
                  type="datetime-local"
                  value={form.date}
                  onChange={(e) =>
                    setForm((s) => ({ ...s, date: e.target.value }))
                  }
                />
              </label>
              <label className="field">
                <span className="field__label">–•–æ–∑—è–µ–≤–∞</span>
                <select
                  className="input"
                  value={form.team1Id}
                  onChange={(e) =>
                    setForm((s) => ({ ...s, team1Id: e.target.value }))
                  }
                >
                  <option value="">‚Äî</option>
                  {teams.map((t) => (
                    <option key={t.id} value={t.id}>
                      {t.title}
                    </option>
                  ))}
                </select>
              </label>
              <label className="field">
                <span className="field__label">–ì–æ—Å—Ç–∏</span>
                <select
                  className="input"
                  value={form.team2Id}
                  onChange={(e) =>
                    setForm((s) => ({ ...s, team2Id: e.target.value }))
                  }
                >
                  <option value="">‚Äî</option>
                  {teams.map((t) => (
                    <option key={t.id} value={t.id}>
                      {t.title}
                    </option>
                  ))}
                </select>
              </label>
              <label className="field">
                <span className="field__label">–°—Ç–∞–¥–∏–æ–Ω</span>
                <select
                  className="input"
                  value={form.stadiumId}
                  onChange={(e) =>
                    setForm((s) => ({ ...s, stadiumId: e.target.value }))
                  }
                >
                  <option value="">‚Äî</option>
                  {stadiums.map((s) => (
                    <option key={s.id} value={s.id}>
                      {s.name}
                    </option>
                  ))}
                </select>
              </label>
            </div>

            <div className="form__row">
              <label className="field">
                <span className="field__label">–°—á—ë—Ç —Ö–æ–∑—è–µ–≤</span>
                <input
                  className="input"
                  type="number"
                  min={0}
                  step={1}
                  value={form.team1Score}
                  onChange={(e) =>
                    setForm((s) => ({ ...s, team1Score: e.target.value }))
                  }
                />
              </label>
              <label className="field">
                <span className="field__label">–°—á—ë—Ç –≥–æ—Å—Ç–µ–π</span>
                <input
                  className="input"
                  type="number"
                  min={0}
                  step={1}
                  value={form.team2Score}
                  onChange={(e) =>
                    setForm((s) => ({ ...s, team2Score: e.target.value }))
                  }
                />
              </label>
            </div>

            <div className="form__actions">
              <button
                className="btn btn--primary"
                type="submit"
                disabled={loading}
              >
                –î–æ–±–∞–≤–∏—Ç—å
              </button>
              <button
                type="button"
                className="btn btn--ghost"
                onClick={() => {
                  resetForm();
                  setShowCreate(false);
                }}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          </form>
        </section>
      )}

      <section className="card">
        <h3>–ú–∞—Ç—á–∏ –ª–∏–≥–∏</h3>
        <div className="table">
          <div className="table__head">
            <div>ID</div>
            <div>–î–∞—Ç–∞</div>
            <div>–ú–∞—Ç—á</div>
            <div>–°—á—ë—Ç</div>
            <div>–î–µ–π—Å—Ç–≤–∏—è</div>
          </div>
          <div className="table__body">
            {matches.length === 0 && (
              <div className="table__row muted">–ù–µ—Ç –º–∞—Ç—á–µ–π</div>
            )}
            {matches.map((m) => (
              <div className="table__row" key={m.id}>
                <div>#{m.id}</div>
                <div>{dtLoc(m.date)}</div>
                <div>
                  {teamName(m.team1Id)} ‚Äî {teamName(m.team2Id)}
                </div>
                <div>
                  {m.team1Score}:{m.team2Score}
                </div>
                <div className="table__actions">
                  <button
                    className="btn btn--sm1"
                    onClick={() =>
                      setLiveMatch({
                        ...m,
                        team1: teams.find((t) => t.id === m.team1Id) || null,
                        team2: teams.find((t) => t.id === m.team2Id) || null,
                      })
                    }
                  >
                    –ü—Ä–æ–≤–µ—Å—Ç–∏ –º–∞—Ç—á
                  </button>
                  <button
                    className="btn btn--sm btn--danger"
                    onClick={() => removeMatch(m.id)}
                  >
                    –£–¥–∞–ª–∏—Ç—å
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>
      </section>

      {liveMatch && (
        <LiveMatchModal
          match={liveMatch}
          onClose={() => setLiveMatch(null)}
          onScoreChanged={(id, score) => patchMatchScore(id, score)}
        />
      )}
    </div>
  );
}
